# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[x]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

1. Use `npx shadcn@latest add [component]` instead of `npx shadcn-ui@latest add [component]` when installing Shadcn UI components.
2. In Next.js 14+, page props params must be typed as a Promise. Example:
   ```typescript
   type tParams = Promise<{ id: string }>;
   interface PageProps {
     params: tParams;
   }
   ```
   Then await the params in the component:
   ```typescript
   export default async function Page(props: PageProps) {
     const { id } = await props.params;
   }
   ```
3. Use `const session = await auth()` instead of `const session = await getServerSession(authOptions)` for Next.js authentication. The new `auth()` function is the recommended way to get the session in Next.js Auth v5.
4. When importing `useRouter` from 'next/navigation', the component must be marked as a client component using the `'use client'` directive at the top of the file, as this hook only works on the client side.
5. When working with Prisma models that have custom fields not in the TypeScript definitions (like string[] arrays), create a custom type that extends the base model:

   ```typescript
   import { Map, Location, FrameStyle, Size, Layer } from "@prisma/client";

   type MapWithDetails = Map & {
     // Include any related models with proper types
     location: Location | null;
     frameStyle: FrameStyle | null;
     size: Size | null;
     layers: Layer[];
     // Add custom fields
     images: string[];
   };

   // Then cast your data to this type
   const mapWithImages = map as unknown as MapWithDetails;
   ```

6. When importing Prisma types that conflict with built-in JavaScript types (like `Map`), use a type import instead:

   ```typescript
   // Instead of this (which causes errors):
   import {
     PrismaClient,
     Map,
     Location,
     FrameStyle,
     Size,
   } from "@prisma/client";

   // Do this:
   import { PrismaClient } from "@prisma/client";
   import type { Map, Location, FrameStyle, Size } from "@prisma/client";
   ```

   This avoids conflicts with built-in JavaScript objects and ensures proper type imports. It's best practice to import all Prisma model types using `import type` to prevent potential conflicts.

7. For production deployments (especially on platforms like Vercel), avoid importing Prisma types directly and instead define your own interfaces that match the Prisma schema structure:

   ```typescript
   // Instead of this (which may cause errors in production):
   import { PrismaClient } from "@prisma/client";
   import type { Map, Location } from "@prisma/client";

   // Do this:
   import { PrismaClient } from "@prisma/client";

   type MapType = {
     id: string;
     name: string;
     description: string | null;
     price: number | string; // Use number | string instead of Prisma.Decimal
     isTemplate: boolean;
     images: string[];
     createdAt: Date;
     updatedAt: Date;
     // Add other fields as needed
   };
   ```

   This approach is more resilient to differences between development and production environments. For Decimal fields in Prisma, use `number | string` instead of `Prisma.Decimal` to ensure compatibility across environments.

8. When using array methods like `map()` with TypeScript, always provide explicit type annotations for parameters to avoid "implicit any" errors:

   ```typescript
   // This will cause errors in strict TypeScript mode:
   {
     items.map((item) => <div key={item.id}>{item.name}</div>);
   }

   // Do this instead:
   {
     items.map((item: ItemType) => <div key={item.id}>{item.name}</div>);
   }

   // Or if you need to use a more generic approach:
   {
     items.map((item: any) => {
       // Cast to your specific type if needed
       const typedItem = item as unknown as ItemType;
       return <div key={typedItem.id}>{typedItem.name}</div>;
     });
   }
   ```

   This is especially important in production builds where TypeScript settings might be stricter.

9. When dealing with complex type casting in TypeScript, especially with Prisma results, use the `unknown` type as an intermediate step for safer type assertions:

   ```typescript
   // Instead of direct casting which can cause errors:
   const results = (await prisma.category.findMany({
     include: { maps: true },
   })) as CategoryType[]; // This might fail with type errors

   // Do this instead:
   const resultsData = await prisma.category.findMany({
     include: { maps: true },
   });
   const results = resultsData as unknown as CategoryType[];

   // And for Decimal fields, use unknown in your type definitions:
   type MapType = {
     // ...other fields
     price: unknown; // Instead of number | string
     // ...other fields
   };

   // Then convert to string when displaying:
   <span>${String(map.price)}</span>;
   ```

   This approach is more resilient to differences between development and production environments.

## Scratchpad

### 1. Project Setup and Configuration [x]

- [x] Initialize Next.js 15 project with TypeScript
- [x] Set up project structure and folders
- [x] Configure ESLint and Prettier
- [x] Install and configure dependencies:
  - [x] Shadcn UI components:
    - [x] Install: `npx shadcn@latest init`
    - [x] Configure theme in `globals.css` and `tailwind.config.js`
    - [x] Add base components: `npx shadcn@latest add button card dialog dropdown-menu input form sonner`
  - [x] Lucide icons: `npm install lucide-react`
  - [x] Zod for validation: `npm install zod`
  - [x] Zustand for state management: `npm install zustand`
  - [x] Recharts for analytics: `npm install recharts`
  - [x] Resend for emails: `npm install resend`
  - [x] Uploadthing for file uploads: `npm install uploadthing @uploadthing/react`
  - [x] Prisma ORM:
    - [x] Install: `npm install prisma @prisma/client`
    - [x] Initialize: `npx prisma init`
  - [x] NextAuth.js beta: `npm install next-auth@beta`
  - [x] Stripe for payments: `npm install stripe @stripe/stripe-js`
  - [x] Google Maps API: `npm install @react-google-maps/api`

### 2. Database and Authentication [ ]

- [x] Set up PostgreSQL database
- [x] Configure Prisma schema:
  - [x] User model (customers and admins)
  - [x] Map model with customization options:
    - [x] Location data (coordinates, zoom level)
    - [x] Map style (road, satellite, terrain)
    - [x] Frame options (style, material, color)
    - [x] Size options
    - [x] Custom text/inscriptions
  - [x] Order model (with customization details)
  - [x] Review model
  - [x] Cart model
- [x] Seed database with sample data:
  - [x] Create categories: "Framed Maps" and "Key Holder Maps"
  - [x] Create sample products for each category
  - [x] Create sample users (admin and customer)
  - [x] Create sample reviews
  - [x] Add product images from public/images folder
- [ ] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes
  - Admin role and permissions

### 3. Core Features - Customer Side [ ]

- [ ] Home Layout:
  - Create responsive header with logo, navigation, and cart icon
  - Design hero section showcasing custom laser-cut maps
  - Create footer with links, social media, and newsletter signup
- [ ] Homepage:
  - Featured maps showcase with high-quality images
  - "How It Works" section explaining the customization process
  - Testimonials from happy customers
  - Gallery of completed projects
  - Call-to-action buttons leading to map builder
- [ ] Map Builder Tool:
  - Custom map creator with Google Maps integration:
    - Location search functionality
    - Map style selection (street, satellite, minimal)
    - Interactive preview with zoom and pan controls
    - Layer depth and material selection
    - Frame style and material options
    - Size selection
    - Custom text/inscription input
    - Real-time cost calculation
  - Implement custom map styling:
    ```javascript
    const customMapStyle = [
      {
        featureType: "all",
        elementType: "all",
        stylers: [{ visibility: "off" }],
      },
      {
        featureType: "road",
        elementType: "geometry",
        stylers: [{ visibility: "on" }, { color: "#000000" }],
      },
      {
        featureType: "water",
        elementType: "geometry",
        stylers: [{ visibility: "on" }],
      },
    ];
    ```
  - 3D preview of final product with selected frame and layers
- [ ] Product Catalog:
  - Premade map designs by category:
    - City maps
    - National parks
    - Wedding venues
    - Historical locations
    - Sports venues
  - Filtering by location, size, style, and price
  - Sorting options (popularity, price, newest)
- [ ] Shopping cart:
  - Add/remove items
  - Update quantities
  - Cart persistence
- [ ] Checkout process:
  - Shipping information
  - Payment integration (Stripe)
  - Order confirmation
- [ ] User dashboard:
  - Order history
  - Profile management
  - Saved addresses
  - Saved map designs

### 4. Admin Dashboard [ ]

- [ ] Admin authentication and authorization
- [ ] Dashboard overview:
  - [ ] Layout and Structure:
    - [ ] Create admin dashboard layout with sidebar navigation
    - [ ] Implement responsive grid for dashboard widgets
    - [ ] Add loading states and error boundaries
  - [ ] Key Metrics Cards:
    - [ ] Total revenue widget with real data
    - [ ] Total orders widget with real data
    - [ ] Total customers widget with real data
    - [ ] Average order value widget with real data
  - [ ] Sales Analytics:
    - [ ] Revenue Chart:
      - [ ] Implement line chart using Recharts
      - [ ] Add daily/weekly/monthly/yearly filters
      - [ ] Show revenue trends over time
      - [ ] Add tooltip with detailed information
    - [ ] Order Statistics:
      - [ ] Bar chart for order volume
      - [ ] Order status distribution
      - [ ] Peak ordering times
  - [ ] Recent Orders Table:
    - [ ] Implement data table with columns:
      - [ ] Order ID
      - [ ] Customer name
      - [ ] Order total
      - [ ] Status
      - [ ] Date
    - [ ] Add sorting and filtering
    - [ ] Quick actions (view, process, update status)
  - [ ] Low Stock Alerts:
    - Materials inventory tracking
    - Reorder notifications
    - Stock level indicators
  - [ ] Production Queue:
    - Current production status
    - Estimated completion times
    - Production capacity visualization
- [ ] Product management:
  - CRUD operations for map templates
  - Material and frame options management
  - Pricing configuration
- [ ] Order management:
  - Order processing workflow
  - Production status updates
  - Shipping integration
  - Refund handling

### 5. Advanced Features [ ]

- [ ] Real-time notifications
- [ ] Email system (Resend):
  - Order confirmations
  - Production status updates
  - Shipping notifications
  - Password reset
- [ ] Search optimization
- [ ] Performance optimization:
  - Image optimization
  - Caching strategies
  - API optimization
- [ ] Analytics and reporting

### 6. Testing and Deployment [ ]

- [ ] Unit testing
- [ ] Integration testing
- [ ] E2E testing
- [ ] Security audit
- [ ] Production deployment:
  - Environment setup
  - CI/CD pipeline
  - Monitoring
  - Backup strategy

### 7. Documentation [ ]

- [ ] API documentation
- [ ] User guide
- [ ] Admin documentation
- [ ] Deployment guide
