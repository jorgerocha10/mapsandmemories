// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Seed Configuration
generator prisma_seed {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

// User model for customers and admins
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  carts         Cart[]
  addresses     Address[]
  savedMaps     SavedMap[]
}

// NextAuth models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Map model with customization options
model Map {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  isTemplate  Boolean  @default(false)
  images      String[] // Array of image paths
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Map customization options
  location      Location?
  mapStyle      MapStyle       @default(ROAD)
  frameStyle    FrameStyle?
  size          Size?
  layers        Layer[]
  customText    String?
  
  // Relations
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  savedMaps     SavedMap[]
  
  // For template maps
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    String?
}

model Location {
  id          String   @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  zoomLevel   Int      @default(12)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  map         Map      @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String   @unique
}

model Layer {
  id          String     @id @default(cuid())
  depth       Int
  material    Material
  color       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  map         Map        @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String
}

model FrameStyle {
  id          String     @id @default(cuid())
  style       String
  material    Material
  color       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  map         Map        @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String     @unique
}

model Size {
  id          String     @id @default(cuid())
  width       Int        // in millimeters
  height      Int        // in millimeters
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  map         Map        @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String     @unique
}

// Order model
model Order {
  id              String        @id @default(cuid())
  userId          String
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  shippingAddress String?       @db.Text
  paymentIntentId String?
  shippingFee     Decimal?      @db.Decimal(10, 2)
  trackingNumber  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  
  // Production tracking
  productionStatus ProductionStatus @default(QUEUED)
  estimatedCompletion DateTime?
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  map         Map      @relation(fields: [mapId], references: [id])
  mapId       String
}

// Review model
model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  map         Map      @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String
}

// Cart model
model Cart {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  cartItems   CartItem[]
}

model CartItem {
  id          String   @id @default(cuid())
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      String
  map         Map      @relation(fields: [mapId], references: [id])
  mapId       String
}

// Address model
model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// Saved map designs
model SavedMap {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  map         Map      @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId       String
}

// Category model for template maps
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  maps        Map[]
}

// Inventory tracking for materials
model Inventory {
  id          String   @id @default(cuid())
  material    Material
  quantity    Int
  lowThreshold Int     @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
}

enum MapStyle {
  ROAD
  SATELLITE
  TERRAIN
  MINIMAL
  DARK
  LIGHT
}

enum Material {
  WOOD_MAPLE
  WOOD_WALNUT
  WOOD_OAK
  ACRYLIC_CLEAR
  ACRYLIC_BLACK
  ACRYLIC_WHITE
  ACRYLIC_BLUE
  METAL_ALUMINUM
  METAL_BRASS
  PAPER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ProductionStatus {
  QUEUED
  DESIGN_PROCESSING
  LASER_CUTTING
  ASSEMBLY
  QUALITY_CONTROL
  PACKAGING
  READY_TO_SHIP
  SHIPPED
}
